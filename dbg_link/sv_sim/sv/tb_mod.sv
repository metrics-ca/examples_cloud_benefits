///////////////////////////////////////////////////////////////////////////////
//             Copyright ///////////////////////////////////
//                        All Rights Reserved
///////////////////////////////////////////////////////////////////////////////
// $Author:  $
//
//
// Description :
//          This file was generated by SV TB Gen Version 1.2
//            on 18 Dec 2023 13:08:26
//////////////////////////////////////////////////////////////////////////////
// This software contains concepts confidential to ////////////////
// /////////. and is only made available within the terms of a written
// agreement.
///////////////////////////////////////////////////////////////////////////////

//  The package.
  `include "tb_pkg.sv"

module tb_mod (dut_if.tb_conn tif);

  import tb_pkg::*;
  //  some handy defs
  `define PAR1 r.rtn_val.par1
  `define PAR2 r.rtn_val.par2
  `define PAR3 r.rtn_val.par3
  `define PAR4 r.rtn_val.par4
  //  package and container
  cmd_lst  cmds;
  tb_trans r;

  integer  in_fh;
  integer  stat;
  logic    clock;
  
  logic [3:0] tx_state = 0;
  logic [7:0] tx_dat;
  logic [7:0] tx_out;
  logic dvalid = 1'b0;
  integer  bidx = 0;
  
  //////////////////////////////////////////////
  //   DUT signals
  logic   rst_in;
  logic   rx_in;
  logic   rx_out;
  logic [7:0] tmp_data;

  ////////////////////////////////////////////////////////
  //  drive DUT  signals through interface
  assign tif.clk = clock;
  assign tif.rst = rst_in;
  assign tif.rxs = rx_in;
  assign rx_out = tif.txs;

  ////////////////////////////////////////////////////
  //  instruction variables
  integer  was_def     = 0;
  string   cmd_string;
  logic  [31:0]  tmp_vec;
  
  integer rate  =  2000;
  integer tmp_int;

  ////////////////////////////////////////////////////////////////////
  //   clock driver
  initial begin
    while(1) begin
      #10 clock = 0;
      #10 clock = 1;
    end
  end

  //////////////////////////////////////////////////////////
  //  stimulus_file processing
  initial begin : Process_STM
// Add start timer here
    cmds = new();
    r    = new();
    //  define the default instructions
    cmds.define_defaults();
    //  User instructions
    cmds.define_instruction("RESET_SYS", 0);
    cmds.define_instruction("RATE_SET", 1);
    cmds.define_instruction("WAIT_CYCS", 1);
    cmds.define_instruction("RX_OUT", 1);
    cmds.define_instruction("WAIT_WORDS", 1);
    cmds.define_instruction("WAIT_TX", 0);
    cmds.define_instruction("VERIFY", 1);
    //cmds.define_instruction("VERIFY", 1);

    //  load the stimulus file
    cmds.load_stm(tb_top.STM_FILE);

    r.cmd = cmds;
    /////////////////////////////////////////////////////
    //  the main loop.
    while (r.cmd != null) begin
      r      = r.cmd.get(r);
      r.next++;

      //  process default instructions
      was_def  =  r.cmd.exec_defaults(r);
      if(was_def) begin
        continue;
      end

      ///////////////////////////////////////////////////////
      //   Process User  instructions.
      // get the command string
      cmd_string = r.cmd.lst_cmds.cmd;
      //  output the dynamic text if there is some. (Note:  before command runs.)
      r.cmd.print_str_wvar();

      ///////////////////////////////////////////////////////////////////////////
      //  RESET
      if (cmd_string == "RESET_SYS") begin
        @(posedge clock);
        #1;
        rst_in  =  0;
        rx_in   =  1;
        @(posedge clock);
        @(posedge clock);
        @(posedge clock);
        @(posedge clock);
        @(posedge clock);
        @(posedge clock);
        @(posedge clock);
        rst_in  =  1;
        @(posedge clock);
        @(posedge clock);
        @(posedge clock);
        
        
      ///////////////////////////////////////////////////////////////////////////
      //  Rate set
      end else if (cmd_string == "RATE_SET") begin
        rate  =  `PAR1;
      
      ///////////////////////////////////////////////////////////////////////////
      //  WAIT cycles
      end else if (cmd_string == "WAIT_CYCS") begin
        tmp_int  =  `PAR1;
        for (int i = tmp_int; i > 0; i--) begin
          @(posedge clock);
        end
        
      ///////////////////////////////////////////////////////////////////////////
      //  WAIT for valid  TX and collect
      end else if (cmd_string == "WAIT_TX") begin
        @(posedge dvalid);
        tmp_int = tx_dat;
        
      ///////////////////////////////////////////////////////////////////////////
      // Verify the item in  tmp_int is = value passed.
      end else if (cmd_string == "VERIFY") begin
        if (`PAR1 != tmp_int) begin
          $fatal(0,"ERROR: Expected compare was false %d expected.  Got: %d", `PAR1, tmp_int);
        end
      
      ///////////////////////////////////////////////////////////////////////////
      //  WRITE
      end else if (cmd_string == "RX_OUT") begin
        tmp_data = `PAR1;
        rx_in =  1;
        for (int i = rate; i > 0; i--) begin
          @(posedge clock);
        end
        // start bit
        rx_in =  0;
        for (int i = rate; i > 0; i--) begin
          @(posedge clock);
        end
        // data bits
        for (int j = 0; j <= 7; j++) begin
          rx_in = tmp_data[j];
          for (int i = rate; i > 0; i--) begin
            @(posedge clock);
          end
        end
        // stop bit
        rx_in =  1;
        for (int i = rate; i > 0; i--) begin
          @(posedge clock);
        end
        
      ///////////////////////////////////////////////////////////////////////////
      //  WRITE
      end else if (cmd_string == "WAIT_WORDS") begin
        for (int i = rate * 10 * `PAR1; i > 0; i--) begin
          @(posedge clock);
        end
        
        
      //////////////////////////////////////////////////////////////////////////
      //  VERIFY
      //end else if (cmd_string == "VERIFY") begin
      //  verify_command : assert (tmp_vec == r.rtn_val.par1) else begin
      //    $fatal(0,"VERIFY failed expected: %x  Got: %x", r.rtn_val.par1, tmp_vec);
      //  end
      end else begin
        $display("ERROR:  Command not found in the else if chain. Is it spelled correctly in the else if?");
      end //  end of else if chain
    end  //  end main while loop
    //  should never end up outside the while loop.
    $display("ERROR:  Some how, a run off the beginning or end of the instruction sequence, has not been caught!!");
  end   //  end Process_STM

  
  //  capture the tx data
  always @(posedge clock) begin
    if (tx_state == 0) begin
      bidx = 0;
      if (rx_out == 0) begin
        tx_state = 1;
        // get to  mid bit
        for (int i = rate/2; i > 0; i--) begin
          @(posedge clock);
        end
        dvalid = 1'b0;
        
      end
    end else if (tx_state == 1) begin
      for (int i = rate; i > 0; i--) begin
        @(posedge clock);
      end
      tx_dat[bidx] = rx_out;
      bidx++;
      if (bidx > 7) begin
        tx_state = 2;
      end
    end else if (tx_state == 2) begin
      tx_out = tx_dat;
      for (int i = rate; i > 0; i--) begin
        @(posedge clock);
      end
      dvalid = 1'b1;
      tx_state = 0;
    //end else if (tx_state == 3) begin
    end 
  end

endmodule // tb_mod

